{"mappings":"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","sources":["index.ts"],"sourcesContent":["import { getRPC, methods } from \"@ravenrebels/ravencoin-rpc\";\r\n\r\nconst ONE_FULL_COIN = 1e8;\r\n\r\nconst URL_MAINNET = \"https://rvn-rpc-mainnet.ting.finance/rpc\";\r\nconst URL_TESTNET = \"https://rvn-rpc-testnet.ting.finance/rpc\";\r\n\r\nlet username = \"anonymouse\";\r\nlet password = \"anonymous\";\r\nlet url = URL_MAINNET;\r\n\r\nlet rpc = getRPC(username, password, url);\r\n\r\nfunction resetRPC() {\r\n  rpc = getRPC(username, password, url);\r\n  return rpc;\r\n}\r\nfunction setURL(newURL: string) {\r\n  url = newURL;\r\n  resetRPC();\r\n}\r\nfunction setUsername(newUsername: string) {\r\n  username = newUsername;\r\n  resetRPC();\r\n}\r\nfunction setPassword(newPassword: string) {\r\n  password = newPassword;\r\n  resetRPC();\r\n}\r\n\r\n/**\r\n  * \r\n  * @param assetName mandatory\r\n  * @param onlytotal otional, when false result is just a list of addresses with balances -- when true the result is just a single number representing the number of addresses\r\n  * @param count (integer, optional, default=50000, MAX=50000) truncates results to include only the first _count_ assets found\r\n  * @param start (integer, optional, default=0) results skip over the first _start_ assets found (if negative it skips back from the end)\r\n  \r\n  */\r\nfunction getAddressesByAsset(\r\n  assetName: string,\r\n  onlytotal?: boolean,\r\n  count?: boolean,\r\n  start?: boolean\r\n): Promise<any> {\r\n  const _onlytotal = onlytotal === undefined ? false : onlytotal;\r\n  let _count = count === undefined ? 5000 : count;\r\n  let _start = start === undefined ? 0 : start;\r\n  if (_count > 50000) {\r\n    _count = 50000;\r\n  }\r\n\r\n  return rpc(methods.listaddressesbyasset, [\r\n    assetName,\r\n    _onlytotal,\r\n    _count,\r\n    _start,\r\n  ]);\r\n}\r\n\r\nfunction getAddressDeltas(address: string | string[]): Promise<any[]> {\r\n  const addresses = turnIntoStringArray(address);\r\n\r\n  return rpc(methods.getaddressdeltas, [{ addresses: addresses }]);\r\n}\r\n\r\nfunction getAddressMempool(address: string | string[]): Promise<any> {\r\n  const addresses = turnIntoStringArray(address); //Support both string and string array\r\n\r\n  const includeAssets = true;\r\n  return rpc(methods.getaddressmempool, [\r\n    { addresses: addresses },\r\n    includeAssets,\r\n  ]);\r\n}\r\n\r\nfunction getAllAssets(\r\n  prefix: string = \"*\",\r\n  includeAllMetaData: boolean = false\r\n): Promise<any> {\r\n  return rpc(methods.listassets, [prefix, includeAllMetaData]);\r\n}\r\n\r\nfunction getAssetBalance(address: string | string[]): Promise<any> {\r\n  const addresses = turnIntoStringArray;\r\n  const includeAssets = true;\r\n  return rpc(methods.getaddressbalance, [\r\n    { addresses: addresses },\r\n    includeAssets,\r\n  ]);\r\n}\r\n\r\nfunction getAsset(name: string): Promise<any> {\r\n  return rpc(methods.getassetdata, [name]);\r\n}\r\nfunction getBestBlockHash(): Promise<string> {\r\n  return rpc(methods.getbestblockhash, []);\r\n}\r\n\r\nfunction getBlockByHash(hash: string): Promise<any> {\r\n  return rpc(methods.getblock, [hash]);\r\n}\r\nfunction getBlockByHeight(height: number): Promise<any> {\r\n  return rpc(methods.getblockhash, [height]).then((hash) => {\r\n    const verbosity = 3; //include transactions\r\n    const block = rpc(methods.getblock, [hash, verbosity]);\r\n    return block;\r\n  });\r\n}\r\nfunction getMempool() {\r\n  return rpc(methods.getrawmempool, [true]);\r\n}\r\n\r\nfunction getRavencoinBalance(addresses: Array<string>) {\r\n  if (!addresses || addresses.length < 1) {\r\n    return {};\r\n  }\r\n  const includeAssets = false;\r\n  const params = [{ addresses: addresses }, includeAssets];\r\n  return rpc(methods.getaddressbalance, params);\r\n}\r\n\r\nfunction getTransaction(id: string): Promise<any> {\r\n  const verbose = true;\r\n  return rpc(methods.getrawtransaction, [id, verbose]);\r\n}\r\n\r\nfunction verifyMessage(\r\n  address: string,\r\n  signature: string,\r\n  message: string\r\n): Promise<boolean> {\r\n  const params = [address, signature, message];\r\n  return rpc(methods.verifymessage, params);\r\n}\r\n\r\nfunction turnIntoStringArray(str: string | string[]): string[] {\r\n  if (typeof str === \"string\") {\r\n    return [str];\r\n  }\r\n  return str;\r\n}\r\n\r\nexport default {\r\n  getAddressesByAsset,\r\n  getAddressDeltas,\r\n  getAddressMempool,\r\n  getAllAssets,\r\n  getAsset,\r\n  getAssetBalance,\r\n  getBestBlockHash,\r\n  getBlockByHash,\r\n  getBlockByHeight,\r\n  getMempool,\r\n  getRavencoinBalance,\r\n  getTransaction,\r\n  setUsername,\r\n  setPassword,\r\n  setURL,\r\n  verifyMessage,\r\n\r\n  URL_MAINNET,\r\n  URL_TESTNET,\r\n};\r\n"],"names":[],"version":3,"file":"index.cjs.map"}